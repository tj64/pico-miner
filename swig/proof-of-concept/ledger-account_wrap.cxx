/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGCFFI


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#ifdef __cplusplus
#  define EXTERN   extern "C"
#else
#  define EXTERN   extern
#endif

#define EXPORT   EXTERN SWIGEXPORT

#include <string.h>



#ifdef __cplusplus
#  define EXTERN   extern "C"
#else
#  define EXTERN   extern
#endif

#define EXPORT   EXTERN SWIGEXPORT

#include <string.h>
#include <stdlib.h>

                                                                                             
/* Includes the header in the wrapper code */                                                  
/* #include "Rinterface.h"         */
#include "/home/tj/gitclone/ledger/src/account.h"

EXPORT void _wrap_account_t_parent_set (ledger::account_t *larg1, ledger::account_t *larg2) {
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  ledger::account_t *arg2 = (ledger::account_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->parent = arg2;
    
  } catch (...) {
    
  }
}


EXPORT ledger::account_t *_wrap_account_t_parent_get (ledger::account_t *larg1) {
  ledger::account_t * lresult = (ledger::account_t *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  ledger::account_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::account_t *) ((arg1)->parent);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::account_t *)0;
  }
}


EXPORT void _wrap_account_t_name_set (ledger::account_t *larg1, string *larg2) {
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->name = arg2;
    
  } catch (...) {
    
  }
}


EXPORT string *_wrap_account_t_name_get (ledger::account_t *larg1) {
  string * lresult = (string *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->name);
    lresult = new string(result);
    return lresult;
  } catch (...) {
    return (string *)0;
  }
}


EXPORT void _wrap_account_t_note_set (ledger::account_t *larg1, optional< string > *larg2) {
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  optional< string > arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->note = arg2;
    
  } catch (...) {
    
  }
}


EXPORT optional< string > *_wrap_account_t_note_get (ledger::account_t *larg1) {
  optional< string > * lresult = (optional< string > *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  optional< string > result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->note);
    lresult = new optional< string >(result);
    return lresult;
  } catch (...) {
    return (optional< string > *)0;
  }
}


EXPORT void _wrap_account_t_depth_set (ledger::account_t *larg1, unsigned short larg2) {
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  unsigned short arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->depth = arg2;
    
  } catch (...) {
    
  }
}


EXPORT unsigned short _wrap_account_t_depth_get (ledger::account_t *larg1) {
  unsigned short lresult = (unsigned short)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  unsigned short result;
  
  arg1 = larg1;
  try {
    result = (unsigned short) ((arg1)->depth);
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned short)0;
  }
}


EXPORT void _wrap_account_t_accounts_set (ledger::account_t *larg1, ledger::accounts_map *larg2) {
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  ledger::accounts_map *arg2 = (ledger::accounts_map *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->accounts = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT ledger::accounts_map *_wrap_account_t_accounts_get (ledger::account_t *larg1) {
  ledger::accounts_map * lresult = (ledger::accounts_map *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  ledger::accounts_map *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::accounts_map *)& ((arg1)->accounts);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::accounts_map *)0;
  }
}


EXPORT void _wrap_account_t_posts_set (ledger::account_t *larg1, ledger::posts_list *larg2) {
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  ledger::posts_list *arg2 = (ledger::posts_list *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->posts = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT ledger::posts_list *_wrap_account_t_posts_get (ledger::account_t *larg1) {
  ledger::posts_list * lresult = (ledger::posts_list *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  ledger::posts_list *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::posts_list *)& ((arg1)->posts);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::posts_list *)0;
  }
}


EXPORT void _wrap_account_t_deferred_posts_set (ledger::account_t *larg1, optional< ledger::deferred_posts_map_t > *larg2) {
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  optional< ledger::deferred_posts_map_t > *arg2 = (optional< ledger::deferred_posts_map_t > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->deferred_posts = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT optional< ledger::deferred_posts_map_t > *_wrap_account_t_deferred_posts_get (ledger::account_t *larg1) {
  optional< ledger::deferred_posts_map_t > * lresult = (optional< ledger::deferred_posts_map_t > *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  optional< ledger::deferred_posts_map_t > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (optional< ledger::deferred_posts_map_t > *)& ((arg1)->deferred_posts);
    lresult = result;
    return lresult;
  } catch (...) {
    return (optional< ledger::deferred_posts_map_t > *)0;
  }
}


EXPORT void _wrap_account_t_value_expr_set (ledger::account_t *larg1, optional< expr_t > *larg2) {
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  optional< expr_t > arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->value_expr = arg2;
    
  } catch (...) {
    
  }
}


EXPORT optional< expr_t > *_wrap_account_t_value_expr_get (ledger::account_t *larg1) {
  optional< expr_t > * lresult = (optional< expr_t > *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  optional< expr_t > result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->value_expr);
    lresult = new optional< expr_t >(result);
    return lresult;
  } catch (...) {
    return (optional< expr_t > *)0;
  }
}


EXPORT void _wrap_account_t__fullname_set (ledger::account_t *larg1, string *larg2) {
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->_fullname = arg2;
    
  } catch (...) {
    
  }
}


EXPORT string *_wrap_account_t__fullname_get (ledger::account_t *larg1) {
  string * lresult = (string *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->_fullname);
    lresult = new string(result);
    return lresult;
  } catch (...) {
    return (string *)0;
  }
}


EXPORT ledger::account_t *_wrap_new_account_t__SWIG_0 (ledger::account_t *larg1, string *larg2, optional< string > *larg3) {
  ledger::account_t * lresult = (ledger::account_t *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  string *arg2 = 0 ;
  optional< string > *arg3 = 0 ;
  ledger::account_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (ledger::account_t *)new ledger::account_t(arg1,(string const &)*arg2,(optional< string > const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::account_t *)0;
  }
}


EXPORT ledger::account_t *_wrap_new_account_t__SWIG_1 (ledger::account_t *larg1, string *larg2) {
  ledger::account_t * lresult = (ledger::account_t *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  string *arg2 = 0 ;
  ledger::account_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::account_t *)new ledger::account_t(arg1,(string const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::account_t *)0;
  }
}


EXPORT ledger::account_t *_wrap_new_account_t__SWIG_2 (ledger::account_t *larg1) {
  ledger::account_t * lresult = (ledger::account_t *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  ledger::account_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::account_t *)new ledger::account_t(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::account_t *)0;
  }
}


EXPORT ledger::account_t *_wrap_new_account_t__SWIG_3 () {
  ledger::account_t * lresult = (ledger::account_t *)0 ;
  ledger::account_t *result = 0 ;
  
  try {
    result = (ledger::account_t *)new ledger::account_t();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::account_t *)0;
  }
}


EXPORT ledger::account_t *_wrap_new_account_t__SWIG_4 (ledger::account_t *larg1) {
  ledger::account_t * lresult = (ledger::account_t *)0 ;
  ledger::account_t *arg1 = 0 ;
  ledger::account_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::account_t *)new ledger::account_t((ledger::account_t const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::account_t *)0;
  }
}


EXPORT void _wrap_delete_account_t (ledger::account_t *larg1) {
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT string *_wrap_account_t_description (ledger::account_t *larg1) {
  string * lresult = (string *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  string result;
  
  arg1 = larg1;
  try {
    result = (arg1)->description();
    lresult = new string(result);
    return lresult;
  } catch (...) {
    return (string *)0;
  }
}


EXPORT string *_wrap_account_t_fullname (ledger::account_t *larg1) {
  string * lresult = (string *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  string result;
  
  arg1 = larg1;
  try {
    result = ((ledger::account_t const *)arg1)->fullname();
    lresult = new string(result);
    return lresult;
  } catch (...) {
    return (string *)0;
  }
}


EXPORT string *_wrap_account_t_partial_name__SWIG_0 (ledger::account_t *larg1, int larg2) {
  string * lresult = (string *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  bool arg2 ;
  string result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    result = ((ledger::account_t const *)arg1)->partial_name(arg2);
    lresult = new string(result);
    return lresult;
  } catch (...) {
    return (string *)0;
  }
}


EXPORT string *_wrap_account_t_partial_name__SWIG_1 (ledger::account_t *larg1) {
  string * lresult = (string *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  string result;
  
  arg1 = larg1;
  try {
    result = ((ledger::account_t const *)arg1)->partial_name();
    lresult = new string(result);
    return lresult;
  } catch (...) {
    return (string *)0;
  }
}


EXPORT void _wrap_account_t_add_account (ledger::account_t *larg1, ledger::account_t *larg2) {
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  ledger::account_t *arg2 = (ledger::account_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->add_account(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_account_t_remove_account (ledger::account_t *larg1, ledger::account_t *larg2) {
  int lresult = (int)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  ledger::account_t *arg2 = (ledger::account_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->remove_account(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT ledger::account_t *_wrap_account_t_find_account__SWIG_0 (ledger::account_t *larg1, string *larg2, int larg3) {
  ledger::account_t * lresult = (ledger::account_t *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  string *arg2 = 0 ;
  bool arg3 ;
  ledger::account_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (ledger::account_t *)(arg1)->find_account((string const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::account_t *)0;
  }
}


EXPORT ledger::account_t *_wrap_account_t_find_account__SWIG_1 (ledger::account_t *larg1, string *larg2) {
  ledger::account_t * lresult = (ledger::account_t *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  string *arg2 = 0 ;
  ledger::account_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::account_t *)(arg1)->find_account((string const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::account_t *)0;
  }
}


EXPORT ledger::account_t *_wrap_account_t_find_account_re (ledger::account_t *larg1, string *larg2) {
  ledger::account_t * lresult = (ledger::account_t *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  string *arg2 = 0 ;
  ledger::account_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::account_t *)(arg1)->find_account_re((string const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::account_t *)0;
  }
}


EXPORT ledger::account_t::accounts_map_seconds_iterator *_wrap_account_t_accounts_begin (ledger::account_t *larg1) {
  ledger::account_t::accounts_map_seconds_iterator * lresult = (ledger::account_t::accounts_map_seconds_iterator *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  SwigValueWrapper< transform_iterator< function< ledger::account_t *(ledger::accounts_map::value_type &) >,std::map< string,ledger::account_t * >::iterator > > result;
  
  arg1 = larg1;
  try {
    result = (arg1)->accounts_begin();
    lresult = new ledger::account_t::accounts_map_seconds_iterator(result);
    return lresult;
  } catch (...) {
    return (ledger::account_t::accounts_map_seconds_iterator *)0;
  }
}


EXPORT ledger::account_t::accounts_map_seconds_iterator *_wrap_account_t_accounts_end (ledger::account_t *larg1) {
  ledger::account_t::accounts_map_seconds_iterator * lresult = (ledger::account_t::accounts_map_seconds_iterator *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  SwigValueWrapper< transform_iterator< function< ledger::account_t *(ledger::accounts_map::value_type &) >,std::map< string,ledger::account_t * >::iterator > > result;
  
  arg1 = larg1;
  try {
    result = (arg1)->accounts_end();
    lresult = new ledger::account_t::accounts_map_seconds_iterator(result);
    return lresult;
  } catch (...) {
    return (ledger::account_t::accounts_map_seconds_iterator *)0;
  }
}


EXPORT void _wrap_account_t_add_post (ledger::account_t *larg1, ledger::post_t *larg2) {
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  ledger::post_t *arg2 = (ledger::post_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->add_post(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_account_t_add_deferred_post (ledger::account_t *larg1, string *larg2, ledger::post_t *larg3) {
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  string *arg2 = 0 ;
  ledger::post_t *arg3 = (ledger::post_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->add_deferred_post((string const &)*arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_account_t_apply_deferred_posts (ledger::account_t *larg1) {
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->apply_deferred_posts();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_account_t_remove_post (ledger::account_t *larg1, ledger::post_t *larg2) {
  int lresult = (int)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  ledger::post_t *arg2 = (ledger::post_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->remove_post(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT ledger::posts_list::iterator *_wrap_account_t_posts_begin (ledger::account_t *larg1) {
  ledger::posts_list::iterator * lresult = (ledger::posts_list::iterator *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  SwigValueWrapper< std::list< ledger::post_t * >::iterator > result;
  
  arg1 = larg1;
  try {
    result = (arg1)->posts_begin();
    lresult = new ledger::posts_list::iterator(result);
    return lresult;
  } catch (...) {
    return (ledger::posts_list::iterator *)0;
  }
}


EXPORT ledger::posts_list::iterator *_wrap_account_t_posts_end (ledger::account_t *larg1) {
  ledger::posts_list::iterator * lresult = (ledger::posts_list::iterator *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  SwigValueWrapper< std::list< ledger::post_t * >::iterator > result;
  
  arg1 = larg1;
  try {
    result = (arg1)->posts_end();
    lresult = new ledger::posts_list::iterator(result);
    return lresult;
  } catch (...) {
    return (ledger::posts_list::iterator *)0;
  }
}


EXPORT expr_t::ptr_op_t *_wrap_account_t_lookup (ledger::account_t *larg1, symbol_t::kind_t const *larg2, string *larg3) {
  expr_t::ptr_op_t * lresult = (expr_t::ptr_op_t *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  symbol_t::kind_t arg2 ;
  string *arg3 = 0 ;
  expr_t::ptr_op_t result;
  
  arg1 = larg1;
  arg2 = *larg2;
  arg3 = larg3;
  try {
    result = (arg1)->lookup(arg2,(string const &)*arg3);
    lresult = new expr_t::ptr_op_t(result);
    return lresult;
  } catch (...) {
    return (expr_t::ptr_op_t *)0;
  }
}


EXPORT int _wrap_account_t_valid (ledger::account_t *larg1) {
  int lresult = (int)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((ledger::account_t const *)arg1)->valid();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_account_t_xdata__set (ledger::account_t *larg1, optional< ledger::account_t::xdata_t > *larg2) {
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  optional< ledger::account_t::xdata_t > *arg2 = (optional< ledger::account_t::xdata_t > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->xdata_ = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT optional< ledger::account_t::xdata_t > *_wrap_account_t_xdata__get (ledger::account_t *larg1) {
  optional< ledger::account_t::xdata_t > * lresult = (optional< ledger::account_t::xdata_t > *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  optional< ledger::account_t::xdata_t > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (optional< ledger::account_t::xdata_t > *)& ((arg1)->xdata_);
    lresult = result;
    return lresult;
  } catch (...) {
    return (optional< ledger::account_t::xdata_t > *)0;
  }
}


EXPORT int _wrap_account_t_has_xdata (ledger::account_t *larg1) {
  int lresult = (int)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((ledger::account_t const *)arg1)->has_xdata();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_account_t_clear_xdata (ledger::account_t *larg1) {
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->clear_xdata();
    
  } catch (...) {
    
  }
}


EXPORT ledger::account_t::xdata_t *_wrap_account_t_xdata__SWIG_0 (ledger::account_t *larg1) {
  ledger::account_t::xdata_t * lresult = (ledger::account_t::xdata_t *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  ledger::account_t::xdata_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::account_t::xdata_t *) &(arg1)->xdata();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::account_t::xdata_t *)0;
  }
}


EXPORT ledger::account_t::xdata_t *_wrap_account_t_xdata__SWIG_1 (ledger::account_t *larg1) {
  ledger::account_t::xdata_t * lresult = (ledger::account_t::xdata_t *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  ledger::account_t::xdata_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::account_t::xdata_t *) &((ledger::account_t const *)arg1)->xdata();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::account_t::xdata_t *)0;
  }
}


EXPORT value_t *_wrap_account_t_amount__SWIG_0 (ledger::account_t *larg1, optional< expr_t & > *larg2) {
  value_t * lresult = (value_t *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  optional< expr_t & > *arg2 = 0 ;
  value_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((ledger::account_t const *)arg1)->amount((optional< expr_t & > const &)*arg2);
    lresult = new value_t(result);
    return lresult;
  } catch (...) {
    return (value_t *)0;
  }
}


EXPORT value_t *_wrap_account_t_amount__SWIG_1 (ledger::account_t *larg1) {
  value_t * lresult = (value_t *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  value_t result;
  
  arg1 = larg1;
  try {
    result = ((ledger::account_t const *)arg1)->amount();
    lresult = new value_t(result);
    return lresult;
  } catch (...) {
    return (value_t *)0;
  }
}


EXPORT value_t *_wrap_account_t_total__SWIG_0 (ledger::account_t *larg1, optional< expr_t & > *larg2) {
  value_t * lresult = (value_t *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  optional< expr_t & > *arg2 = 0 ;
  value_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((ledger::account_t const *)arg1)->total((optional< expr_t & > const &)*arg2);
    lresult = new value_t(result);
    return lresult;
  } catch (...) {
    return (value_t *)0;
  }
}


EXPORT value_t *_wrap_account_t_total__SWIG_1 (ledger::account_t *larg1) {
  value_t * lresult = (value_t *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  value_t result;
  
  arg1 = larg1;
  try {
    result = ((ledger::account_t const *)arg1)->total();
    lresult = new value_t(result);
    return lresult;
  } catch (...) {
    return (value_t *)0;
  }
}


EXPORT ledger::account_t::xdata_t::details_t *_wrap_account_t_self_details__SWIG_0 (ledger::account_t *larg1, int larg2) {
  ledger::account_t::xdata_t::details_t * lresult = (ledger::account_t::xdata_t::details_t *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  bool arg2 ;
  ledger::account_t::xdata_t::details_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    result = (ledger::account_t::xdata_t::details_t *) &((ledger::account_t const *)arg1)->self_details(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::account_t::xdata_t::details_t *)0;
  }
}


EXPORT ledger::account_t::xdata_t::details_t *_wrap_account_t_self_details__SWIG_1 (ledger::account_t *larg1) {
  ledger::account_t::xdata_t::details_t * lresult = (ledger::account_t::xdata_t::details_t *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  ledger::account_t::xdata_t::details_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::account_t::xdata_t::details_t *) &((ledger::account_t const *)arg1)->self_details();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::account_t::xdata_t::details_t *)0;
  }
}


EXPORT ledger::account_t::xdata_t::details_t *_wrap_account_t_family_details__SWIG_0 (ledger::account_t *larg1, int larg2) {
  ledger::account_t::xdata_t::details_t * lresult = (ledger::account_t::xdata_t::details_t *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  bool arg2 ;
  ledger::account_t::xdata_t::details_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    result = (ledger::account_t::xdata_t::details_t *) &((ledger::account_t const *)arg1)->family_details(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::account_t::xdata_t::details_t *)0;
  }
}


EXPORT ledger::account_t::xdata_t::details_t *_wrap_account_t_family_details__SWIG_1 (ledger::account_t *larg1) {
  ledger::account_t::xdata_t::details_t * lresult = (ledger::account_t::xdata_t::details_t *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  ledger::account_t::xdata_t::details_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::account_t::xdata_t::details_t *) &((ledger::account_t const *)arg1)->family_details();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::account_t::xdata_t::details_t *)0;
  }
}


EXPORT int _wrap_account_t_has_xflags (ledger::account_t *larg1, ledger::account_t::xdata_t::flags_t *larg2) {
  int lresult = (int)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  ledger::account_t::xdata_t::flags_t arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    result = (bool)((ledger::account_t const *)arg1)->has_xflags(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_account_t_children_with_xdata (ledger::account_t *larg1) {
  int lresult = (int)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((ledger::account_t const *)arg1)->children_with_xdata();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT std::size_t *_wrap_account_t_children_with_flags (ledger::account_t *larg1, ledger::account_t::xdata_t::flags_t *larg2) {
  std::size_t * lresult = (std::size_t *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  ledger::account_t::xdata_t::flags_t arg2 ;
  std::size_t result;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    result = ((ledger::account_t const *)arg1)->children_with_flags(arg2);
    lresult = new std::size_t(result);
    return lresult;
  } catch (...) {
    return (std::size_t *)0;
  }
}


EXPORT std::ostream *_wrap___lshift__ (std::ostream *larg1, ledger::account_t *larg2) {
  std::ostream * lresult = (std::ostream *)0 ;
  std::ostream *arg1 = 0 ;
  ledger::account_t *arg2 = 0 ;
  std::ostream *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (std::ostream *) &ledger::operator <<(*arg1,(ledger::account_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (std::ostream *)0;
  }
}


EXPORT void _wrap_put_account (property_tree::ptree *larg1, ledger::account_t *larg2, function< bool (ledger::account_t const &) > *larg3) {
  property_tree::ptree *arg1 = 0 ;
  ledger::account_t *arg2 = 0 ;
  SwigValueWrapper< function< bool (ledger::account_t const &) > > arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    ledger::put_account(*arg1,(ledger::account_t const &)*arg2,arg3);
    
  } catch (...) {
    
  }
}


