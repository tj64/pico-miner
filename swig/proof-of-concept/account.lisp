;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 3.0.2
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.


;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (cl:&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cffi:defcfun ("_wrap_account_t_parent_set" account_t_parent_set) :void
  (self :pointer)
  (parent :pointer))

(cffi:defcfun ("_wrap_account_t_parent_get" account_t_parent_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_account_t_name_set" account_t_name_set) :void
  (self :pointer)
  (name :pointer))

(cffi:defcfun ("_wrap_account_t_name_get" account_t_name_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_account_t_note_set" account_t_note_set) :void
  (self :pointer)
  (note :pointer))

(cffi:defcfun ("_wrap_account_t_note_get" account_t_note_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_account_t_depth_set" account_t_depth_set) :void
  (self :pointer)
  (depth :unsigned-short))

(cffi:defcfun ("_wrap_account_t_depth_get" account_t_depth_get) :unsigned-short
  (self :pointer))

(cffi:defcfun ("_wrap_account_t_accounts_set" account_t_accounts_set) :void
  (self :pointer)
  (accounts :pointer))

(cffi:defcfun ("_wrap_account_t_accounts_get" account_t_accounts_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_account_t_posts_set" account_t_posts_set) :void
  (self :pointer)
  (posts :pointer))

(cffi:defcfun ("_wrap_account_t_posts_get" account_t_posts_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_account_t_deferred_posts_set" account_t_deferred_posts_set) :void
  (self :pointer)
  (deferred_posts :pointer))

(cffi:defcfun ("_wrap_account_t_deferred_posts_get" account_t_deferred_posts_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_account_t_value_expr_set" account_t_value_expr_set) :void
  (self :pointer)
  (value_expr :pointer))

(cffi:defcfun ("_wrap_account_t_value_expr_get" account_t_value_expr_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_account_t__fullname_set" account_t__fullname_set) :void
  (self :pointer)
  (_fullname :pointer))

(cffi:defcfun ("_wrap_account_t__fullname_get" account_t__fullname_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_new_account_t__SWIG_0" new_account_t) :pointer
  (_parent :pointer)
  (_name :pointer)
  (_note :pointer))

(cffi:defcfun ("_wrap_new_account_t__SWIG_1" new_account_t) :pointer
  (_parent :pointer)
  (_name :pointer))

(cffi:defcfun ("_wrap_new_account_t__SWIG_2" new_account_t) :pointer
  (_parent :pointer))

(cffi:defcfun ("_wrap_new_account_t__SWIG_3" new_account_t) :pointer)

(cffi:defcfun ("_wrap_new_account_t__SWIG_4" new_account_t) :pointer
  (other :pointer))

(cffi:defcfun ("_wrap_delete_account_t" delete_account_t) :void
  (self :pointer))

(cffi:defcfun ("_wrap_account_t_description" account_t_description) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_account_t_fullname" account_t_fullname) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_account_t_partial_name__SWIG_0" account_t_partial_name) :pointer
  (self :pointer)
  (flat :pointer))

(cffi:defcfun ("_wrap_account_t_partial_name__SWIG_1" account_t_partial_name) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_account_t_add_account" account_t_add_account) :void
  (self :pointer)
  (acct :pointer))

(cffi:defcfun ("_wrap_account_t_remove_account" account_t_remove_account) :pointer
  (self :pointer)
  (acct :pointer))

(cffi:defcfun ("_wrap_account_t_find_account__SWIG_0" account_t_find_account) :pointer
  (self :pointer)
  (name :pointer)
  (auto_create :pointer))

(cffi:defcfun ("_wrap_account_t_find_account__SWIG_1" account_t_find_account) :pointer
  (self :pointer)
  (name :pointer))

(cffi:defcfun ("_wrap_account_t_find_account_re" account_t_find_account_re) :pointer
  (self :pointer)
  (regexp :pointer))

(cffi:defcfun ("_wrap_account_t_accounts_begin" account_t_accounts_begin) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_account_t_accounts_end" account_t_accounts_end) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_account_t_add_post" account_t_add_post) :void
  (self :pointer)
  (post :pointer))

(cffi:defcfun ("_wrap_account_t_add_deferred_post" account_t_add_deferred_post) :void
  (self :pointer)
  (uuid :pointer)
  (post :pointer))

(cffi:defcfun ("_wrap_account_t_apply_deferred_posts" account_t_apply_deferred_posts) :void
  (self :pointer))

(cffi:defcfun ("_wrap_account_t_remove_post" account_t_remove_post) :pointer
  (self :pointer)
  (post :pointer))

(cffi:defcfun ("_wrap_account_t_posts_begin" account_t_posts_begin) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_account_t_posts_end" account_t_posts_end) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_account_t_lookup" account_t_lookup) :pointer
  (self :pointer)
  (kind :pointer)
  (name :pointer))

(cffi:defcfun ("_wrap_account_t_valid" account_t_valid) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_account_t_xdata__set" account_t_xdata__set) :void
  (self :pointer)
  (xdata_ :pointer))

(cffi:defcfun ("_wrap_account_t_xdata__get" account_t_xdata__get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_account_t_has_xdata" account_t_has_xdata) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_account_t_clear_xdata" account_t_clear_xdata) :void
  (self :pointer))

(cffi:defcfun ("_wrap_account_t_xdata__SWIG_0" account_t_xdata) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_account_t_xdata__SWIG_1" account_t_xdata) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_account_t_amount__SWIG_0" account_t_amount) :pointer
  (self :pointer)
  (expr :pointer))

(cffi:defcfun ("_wrap_account_t_amount__SWIG_1" account_t_amount) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_account_t_total__SWIG_0" account_t_total) :pointer
  (self :pointer)
  (expr :pointer))

(cffi:defcfun ("_wrap_account_t_total__SWIG_1" account_t_total) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_account_t_self_details__SWIG_0" account_t_self_details) :pointer
  (self :pointer)
  (gather_all :pointer))

(cffi:defcfun ("_wrap_account_t_self_details__SWIG_1" account_t_self_details) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_account_t_family_details__SWIG_0" account_t_family_details) :pointer
  (self :pointer)
  (gather_all :pointer))

(cffi:defcfun ("_wrap_account_t_family_details__SWIG_1" account_t_family_details) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_account_t_has_xflags" account_t_has_xflags) :pointer
  (self :pointer)
  (flags :pointer))

(cffi:defcfun ("_wrap_account_t_children_with_xdata" account_t_children_with_xdata) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_account_t_children_with_flags" account_t_children_with_flags) :pointer
  (self :pointer)
  (flags :pointer))

(cffi:defcfun ("_wrap___lshift__" __lshift__) :pointer
  (out :pointer)
  (account :pointer))

(cffi:defcfun ("_wrap_put_account" put_account) :void
  (pt :pointer)
  (acct :pointer)
  (pred :pointer))

(cffi:defcstruct account_compare
	(__funcall__ :pointer))


